
Description: Create a VSCode code-server instance with an Amazon CloudFront distribution
Parameters:
  VSCodeUser:
    Type: String
    Description: UserName for Visual Studio Code Server
    Default: ubuntu
  InstanceName:
    Type: String
    Description: Name of the VS Code EC2 Instance Name
    Default: VSCodeServer
  InstanceVolumeSize:
    Type: Number
    Description: The VS Code EC2 instance volume size in GB
    Default: 100
  InstanceType:
    Description: Type of VS Code EC2 instance
    Type: String
    Default: c6i.large
    AllowedValues: [
      c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge, c5.12xlarge, c5.18xlarge, c5.24xlarge,
      c5a.large, c5a.xlarge, c5a.2xlarge, c5a.4xlarge, c5a.8xlarge, c5a.12xlarge, c5a.16xlarge, c5a.24xlarge,
      c5ad.large, c5ad.xlarge, c5ad.2xlarge, c5ad.4xlarge, c5ad.8xlarge, c5ad.12xlarge, c5ad.16xlarge, c5ad.24xlarge,
      c5d.large, c5d.xlarge, c5d.2xlarge, c5d.4xlarge, c5d.9xlarge, c5d.12xlarge, c5d.18xlarge, c5d.24xlarge,
      c5n.large, c5n.xlarge, c5n.2xlarge, c5n.4xlarge, c5n.9xlarge, c5n.18xlarge,
      c6a.large, c6a.xlarge, c6a.2xlarge, c6a.4xlarge, c6a.8xlarge, c6a.12xlarge, c6a.16xlarge, c6a.24xlarge, c6a.32xlarge, c6a.48xlarge,
      c6g.medium, c6g.large, c6g.xlarge, c6g.2xlarge, c6g.4xlarge, c6g.8xlarge, c6g.12xlarge, c6g.16xlarge,
      c6gd.medium, c6gd.large, c6gd.xlarge, c6gd.2xlarge, c6gd.4xlarge, c6gd.8xlarge, c6gd.12xlarge, c6gd.16xlarge,
      c6gn.medium, c6gn.large, c6gn.xlarge, c6gn.2xlarge, c6gn.4xlarge, c6gn.8xlarge, c6gn.12xlarge, c6gn.16xlarge,
      c6i.large, c6i.xlarge, c6i.2xlarge, c6i.4xlarge, c6i.8xlarge, c6i.12xlarge, c6i.16xlarge, c6i.24xlarge, c6i.32xlarge,
      c7g.medium, c7g.large, c7g.xlarge, c7g.2xlarge, c7g.4xlarge, c7g.8xlarge, c7g.12xlarge, c7g.16xlarge,
      c7gd.medium, c7gd.large, c7gd.xlarge, c7gd.2xlarge, c7gd.4xlarge, c7gd.8xlarge, c7gd.12xlarge, c7gd.16xlarge,
      c7gn.medium, c7gn.large, c7gn.xlarge, c7gn.2xlarge, c7gn.4xlarge, c7gn.8xlarge, c7gn.12xlarge, c7gn.16xlarge,
      c7i.large, c7i.xlarge, c7i.2xlarge, c7i.4xlarge, c7i.8xlarge, c7i.12xlarge, c7i.16xlarge, c7i.24xlarge, c7i.48xlarge,
      m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge, m4.16xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge, m5.8xlarge, m5.12xlarge, m5.16xlarge, m5.24xlarge,
      m5a.large, m5a.xlarge, m5a.2xlarge, m5a.4xlarge, m5a.8xlarge, m5a.12xlarge, m5a.16xlarge, m5a.24xlarge,
      m6a.large, m6a.xlarge, m6a.2xlarge, m6a.4xlarge, m6a.8xlarge, m6a.12xlarge, m6a.16xlarge, m6a.24xlarge, m6a.32xlarge, m6a.48xlarge,
      m7a.medium, m7a.large, m7a.xlarge, m7a.2xlarge, m7a.4xlarge, m7a.8xlarge, m7a.12xlarge, m7a.16xlarge, m7a.24xlarge, m7a.32xlarge, m7a.48xlarge,
      m7g.medium, m7g.large, m7g.xlarge, m7g.2xlarge, m7g.4xlarge, m7g.8xlarge, m7g.12xlarge, m7g.16xlarge,
      m7gd.medium, m7gd.large, m7gd.xlarge, m7gd.2xlarge, m7gd.4xlarge, m7gd.8xlarge, m7gd.12xlarge, m7gd.16xlarge,
      m7i.large, m7i.xlarge, m7i.2xlarge, m7i.4xlarge, m7i.8xlarge, m7i.12xlarge, m7i.16xlarge, m7i.24xlarge, m7i.48xlarge,
      t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
      t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
      t3a.nano, t3a.micro, t3a.small, t3a.medium, t3a.large, t3a.xlarge, t3a.2xlarge,
      t4g.nano, t4g.micro, t4g.small, t4g.medium, t4g.large, t4g.xlarge, t4g.2xlarge
    ]
  InstanceAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Description: AMI ID parameter path for the VSCode instance
    Default: '/aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id'
    # aws ssm get-parameters-by-path --path "/aws/service/canonical/ubuntu/" --recursive --query "Parameters[*].Name"  > canonical-ami.txt
    # aws ssm get-parameters-by-path --path "/aws/service/ami-amazon-linux-latest/" --recursive --query "Parameters[*].Name"  > amazon-ami.txt
    AllowedValues: [
      '/aws/service/canonical/ubuntu/server/focal/stable/current/arm64/hvm/ebs-gp2/ami-id',
      '/aws/service/canonical/ubuntu/server/focal/stable/current/amd64/hvm/ebs-gp2/ami-id',
      '/aws/service/canonical/ubuntu/server-minimal/focal/stable/current/arm64/hvm/ebs-gp2/ami-id',
      '/aws/service/canonical/ubuntu/server-minimal/focal/stable/current/amd64/hvm/ebs-gp2/ami-id',
      '/aws/service/canonical/ubuntu/server/jammy/stable/current/arm64/hvm/ebs-gp2/ami-id',
      '/aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id',
      '/aws/service/canonical/ubuntu/server-minimal/jammy/stable/current/arm64/hvm/ebs-gp2/ami-id',
      '/aws/service/canonical/ubuntu/server-minimal/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id',
      '/aws/service/canonical/ubuntu/server/noble/stable/current/arm64/hvm/ebs-gp3/ami-id',
      '/aws/service/canonical/ubuntu/server/noble/stable/current/amd64/hvm/ebs-gp3/ami-id',
      '/aws/service/canonical/ubuntu/server-minimal/noble/stable/current/arm64/hvm/ebs-gp3/ami-id',
      '/aws/service/canonical/ubuntu/server-minimal/noble/stable/current/amd64/hvm/ebs-gp3/ami-id',
      '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-arm64',
      '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64',
      '/aws/service/ami-amazon-linux-latest/al2023-ami-minimal-kernel-default-arm64',
      '/aws/service/ami-amazon-linux-latest/al2023-ami-minimal-kernel-default-x86_64',
      '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2',
      '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    ]
  HomeFolder:
    Type: String
    Description: Folder to open in VS Code server
    Default: /Gamelift
  DevServerBasePath:
    Type: String
    Description: The base path for the application to be added to nginx sites-available list
    Default: app
  DevServerPort:
    Type: Number
    Description: The port for the DevServer
    Default: 8081
  GameLiftAgentVersion:
    Type: String
    Description: The version of Amazon GameLift Agent
    Default: '1.0.1'
    AllowedValues: [
      '1.0.1', 
      '1.0.2'
    ]
  # AssetZipS3Path:
  #   Description: The S3 path holding the asset zip file to be copied into the home folder. To leave the empty, leave blank.
  #   Type: String
  #   Default: ''
  # BranchZipS3Path:
  #   Description: The S3 path holding the branches zip file to be checked into the git repo, with each folder being a branch. To leave the empty, leave blank.
  #   Type: String
  #   Default: ''

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Instance Configuration
        Parameters:
          - InstanceName
          - InstanceVolumeSize
          - InstanceType
          - InstanceAmiId
      - Label:
          default: Code Server Configuration
        Parameters:
          - VSCodeUser
          - HomeFolder
          - DevServerBasePath
          - DevServerPort
    ParameterLabels:
      VSCodeUser:
        default: VSCode user name
      InstanceName:
        default: Instance name
      InstanceVolumeSize:
        default: Instance volume size
      InstanceType:
        default: Instance type
      InstanceAmiId:
        default: Instance AMI ID path
      HomeFolder:
        default: VSCode home folder
      DevServerBasePath:
        default: Application base path
      DevServerPort:
        default: Application port

Mappings:
  # aws ec2 describe-managed-prefix-lists  --region <REGION> | jq -r '.PrefixLists[] | select (.PrefixListName == "com.amazonaws.global.cloudfront.origin-facing") | .PrefixListId'
  AWSRegions2PrefixListID:
    ap-northeast-1:
      PrefixList: pl-58a04531
    ap-northeast-2:
      PrefixList: pl-22a6434b
    ap-south-1:
      PrefixList: pl-9aa247f3
    ap-southeast-1:
      PrefixList: pl-31a34658
    ap-southeast-2:
      PrefixList: pl-b8a742d1
    ca-central-1:
      PrefixList: pl-38a64351
    eu-central-1:
      PrefixList: pl-a3a144ca
    eu-north-1:
      PrefixList: pl-fab65393
    eu-west-1:
      PrefixList: pl-4fa04526
    eu-west-2:
      PrefixList: pl-93a247fa
    eu-west-3:
      PrefixList: pl-75b1541c
    sa-east-1:
      PrefixList: pl-5da64334
    us-east-1:
      PrefixList: pl-3b927c52
    us-east-2:
      PrefixList: pl-b6a144df
    us-west-1:
      PrefixList: pl-4ea04527
    us-west-2:
      PrefixList: pl-82a045eb

Resources:
  SecretPlaintextLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - !Sub lambda.${AWS::URLSuffix}
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AwsSecretsManager
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref VSCodeSecret

  SecretPlaintextLambda:
    Type: AWS::Lambda::Function
    # Metadata:
    #   cfn_nag:
    #     rules_to_suppress:
    #       - id: W58
    #         reason: Cloud9LambdaExecutionRole has the AWSLambdaBasicExecutionRole managed policy attached, allowing writing to CloudWatch logs
    #       - id: W89
    #         reason: Bootstrap function does not need the scaffolding of a VPC or provisioned concurrency
    #       - id: W92
    #         reason: Bootstrap function does not need provisioned concurrency
    Properties:
      Description: Return the value of the secret
      Handler: index.lambda_handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 10
      Architectures:
        - arm64
      Role: !GetAtt SecretPlaintextLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def is_valid_json(json_string):
            logger.debug('Calling is_valid_jason: %s', json_string)
            try:
              json.loads(json_string)
              logger.info('Secret is in json format')
              return True
            except json.JSONDecodeError:
              logger.info('Secret is in string format')
              return False
          def lambda_handler(event, context):
            try:
              if event['RequestType'] == 'Delete':
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData={}, reason='No action to take')
              else:
                secret_name = (event['ResourceProperties']['SecretArn'])
                secrets_mgr = boto3.client('secretsmanager')
                secret = secrets_mgr.get_secret_value(SecretId = secret_name)
                logger.info('Getting secret from %s', secret_name)
                secret_value = secret['SecretString']
                logger.debug('secret_value: %s', secret_value)
                responseData = {}
                if is_valid_json(secret_value):
                  responseData = secret_value
                else:
                  responseData = {'secret': secret_value}
                logger.debug('responseData: %s', responseData)
                logger.debug('type(responseData): %s', type(responseData))
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData=json.loads(responseData), reason='OK', noEcho=True)
            except Exception as e:
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData={}, reason=str(e))

  ########### SSM Resources ###########
  RunSSMDocCustom:
    Type: Custom::RunSSMDocLambda
    Properties:
      ServiceToken: !GetAtt RunSSMDocLambda.Arn
      InstanceId: !Ref VSCodeInstance
      DocumentName: !Ref VSCodeSSMDoc
      CloudWatchLogGroupName: !Ref VSCodeSSMDocLogGroup
      password: !GetAtt SecretPlaintext.password

  RunSSMDocLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: RunSSMDocOnEC2
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                Resource:
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/${VSCodeSSMDoc}
                  - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/${VSCodeInstance}

  RunSSMDocLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Run SSM document on EC2 instance
      Handler: index.lambda_handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 20
      Architectures:
        - arm64
      Role: !GetAtt RunSSMDocLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          ssm = boto3.client('ssm')

          def lambda_handler(event, context):
            logger.debug('event: %s', event)
            try:
              if event['RequestType'] != 'Create':
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData={}, reason='No action to take')
              else:
                resource_properties = (event['ResourceProperties'])
                logger.debug('resource_properties: %s', resource_properties)

                instance_id = (event['ResourceProperties']['InstanceId'])
                document_name = (event['ResourceProperties']['DocumentName'])
                cloudwatch_log_group_name = (event['ResourceProperties']['CloudWatchLogGroupName'])

                del resource_properties['ServiceToken']
                del resource_properties['InstanceId']
                del resource_properties['DocumentName']
                del resource_properties['CloudWatchLogGroupName']

                parameters = {}
                for key, value in resource_properties.items():
                  parameters[key] = [value]

                logger.info('Running SSM Document %s on EC2 Instance %s. Logging to %s', document_name, instance_id, cloudwatch_log_group_name)
                logger.debug('Parameters: %s', parameters)
               
                response = ssm.send_command(
                  InstanceIds = [instance_id],
                  DocumentName = document_name,
                  CloudWatchOutputConfig = {'CloudWatchLogGroupName': cloudwatch_log_group_name, 'CloudWatchOutputEnabled': True},
                  Parameters = parameters
                )
                command_id = response['Command']['CommandId']
                responseData = {'CommandId': command_id}
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, reason='OK')
            except Exception as e:
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData={}, reason=str(e))

  VSCodeSecret:
    # Metadata:
    #   cfn_nag:
    #     rules_to_suppress:
    #       - id: W77
    #         reason: Secrets Manager Secret should explicitly specify KmsKeyId to allow secret to be shared cross-account - this is not required for this secret as it is generated per-account.
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Name: !Ref InstanceName
      Description: VSCode user details
      GenerateSecretString:
        PasswordLength: 16
        SecretStringTemplate: !Sub '{"username":"${VSCodeUser}"}'
        GenerateStringKey: 'password'
        ExcludePunctuation: true

  SecretPlaintext:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SecretPlaintextLambda.Arn
      ServiceTimeout: 20
      SecretArn: !Ref VSCodeSecret

  VSCodeSSMDoc:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: Bootstrap VSCode code-server instance
        parameters:
          password:
            type: String
            default: !Ref AWS::StackId
          nodeVersion:
            type: String
            default: node_22.x
            allowedValues:
              - node_22.x
              - node_20.x
              - node_18.x
          dotNetVersion:
            type: String
            default: dotnet-sdk-8.0
            allowedValues:
              - dotnet-sdk-8.0
              - dotnet-sdk-7.0
              - dotnet-sdk-6.0
        # all mainSteps scripts are in in /var/lib/amazon/ssm/<instanceid>/document/orchestration/<uuid>/<StepName>/_script.sh
        mainSteps:
          - action: aws:runShellScript
            name: InstallAptUtils
            inputs:
              runCommand:
                - '#!/bin/bash'
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y apt-utils 2>&1
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y needrestart
                - sed -i 's/#$nrconf{kernelhints} = -1;/$nrconf{kernelhints} = 0;/' /etc/needrestart/needrestart.conf
                - echo "\$nrconf{restart} = 'a';" >> /etc/needrestart/needrestart.conf
          - action: aws:runShellScript
            name: AddUser
            inputs:
              runCommand:
                - '#!/bin/bash'
                - !Sub |
                  if [[ "${VSCodeUser}" == "ubuntu" ]]
                  then
                    echo 'Using existing user: ${VSCodeUser}'
                  else
                    echo 'Adding user: ${VSCodeUser}'
                    adduser --disabled-password --gecos '' ${VSCodeUser}
                    echo "${VSCodeUser}:{{ password }}" | chpasswd
                    usermod -aG sudo ${VSCodeUser}
                  fi
                - !Sub mkdir -p /home/${VSCodeUser} && chown -R ${VSCodeUser}:${VSCodeUser} /home/${VSCodeUser}
                - echo "User Added. Checking configuration"
                - cat /etc/passwd
          - action: aws:runShellScript
            name: InstallNode
            inputs:
              runCommand:
                - '#!/bin/bash'
                # - curl -fsSL https://deb.nodesource.com/setup_22.x | sh
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y curl gnupg
                - curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /usr/share/keyrings/nodesource.gpg
                - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/nodesource.gpg] https://deb.nodesource.com/{{ nodeVersion }} nodistro main" > /etc/apt/sources.list.d/nodesource.list
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y nodejs
                - npm install -g npm@latest
                - echo "Node and npm installed. Checking configuration"
                - node -v
                - npm -v
          - action: aws:runShellScript
            name: ConfigureCodeServer
            inputs:
              runCommand:
                - '#!/bin/bash'
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y curl nginx whois argon2 openssl
                - !Sub export HOME=/home/${VSCodeUser}
                - curl -fsSL https://code-server.dev/install.sh | bash -s -- 2>&1
                - !Sub sudo systemctl enable --now code-server@${VSCodeUser} 2>&1
                - !Sub |
                  sudo tee /etc/nginx/sites-available/code-server <<EOF
                  server {
                      listen 80;
                      listen [::]:80;
                      server_name ${CloudFrontDistribution.DomainName};
                      location / {
                        proxy_pass http://localhost:8080/;
                        proxy_set_header Host \$host;
                        proxy_set_header Upgrade \$http_upgrade;
                        proxy_set_header Connection upgrade;
                        proxy_set_header Accept-Encoding gzip;
                      }
                      location /${DevServerBasePath} {
                        proxy_pass http://localhost:${DevServerPort}/${DevServerBasePath};
                        proxy_set_header Host \$host;
                        proxy_set_header Upgrade \$http_upgrade;
                        proxy_set_header Connection upgrade;
                        proxy_set_header Accept-Encoding gzip;
                      }
                  }
                  EOF
                - !Sub mkdir -p /home/${VSCodeUser}/.config/code-server
                - !Sub |
                  sudo tee /home/${VSCodeUser}/.config/code-server/config.yaml <<EOF
                  cert: false
                  auth: password
                  hashed-password: "$(echo -n {{ password }} | argon2 $(openssl rand -base64 12) -e)"
                  EOF
                - !Sub mkdir -p /home/${VSCodeUser}/.local/share/code-server/User/
                - !Sub touch /home/${VSCodeUser}/.hushlogin
                - !Sub mkdir -p ${HomeFolder} && chown -R ${VSCodeUser}:${VSCodeUser} ${HomeFolder}
                - !Sub |
                  sudo tee /home/${VSCodeUser}/.local/share/code-server/User/settings.json <<EOF
                  {
                    "extensions.autoUpdate": false,
                    "extensions.autoCheckUpdates": false,
                    "terminal.integrated.cwd": "${HomeFolder}",
                    "telemetry.telemetryLevel": "off",
                    "security.workspace.trust.startupPrompt": "never",
                    "security.workspace.trust.enabled": false,
                    "security.workspace.trust.banner": "never",
                    "security.workspace.trust.emptyWindow": false,
                    "editor.indentSize": "tabSize",
                    "editor.tabSize": 2,
                    "python.testing.pytestEnabled": true,
                    "auto-run-command.rules": [
                      {
                        "command": "workbench.action.terminal.new"
                      }
                    ]
                  }
                  EOF
                - !Sub chown -R ${VSCodeUser}:${VSCodeUser} /home/${VSCodeUser}
                - !Sub sudo systemctl restart code-server@${VSCodeUser}
                - sudo ln -s ../sites-available/code-server /etc/nginx/sites-enabled/code-server 2>&1
                - sudo systemctl restart nginx
                # - !Sub sudo -u ${VSCodeUser} --login code-server --install-extension AmazonWebServices.aws-toolkit-vscode --force
                - !Sub sudo -u ${VSCodeUser} --login code-server --install-extension AmazonWebServices.amazon-q-vscode --force
                - !Sub sudo -u ${VSCodeUser} --login code-server --install-extension synedra.auto-run-command --force
                - !Sub sudo -u ${VSCodeUser} --login code-server --install-extension vscjava.vscode-java-pack --force
                - !Sub sudo -u ${VSCodeUser} --login code-server --install-extension ms-vscode.live-server --force
                - !Sub chown -R ${VSCodeUser}:${VSCodeUser} /home/${VSCodeUser}
                - echo "Nginx installed. Checking configuration"
                - nginx -t 2>&1
                - systemctl status nginx
                - echo "CodeServer installed. Checking configuration"
                - code-server -v
                - !Sub systemctl status code-server@${VSCodeUser}
          - action: aws:runShellScript
            name: UpdateProfile
            inputs:
              runCommand:
                - '#!/bin/bash'
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y locales locales-all
                - echo LANG=en_US.utf-8 >> /etc/environment
                - echo LC_ALL=en_US.UTF-8 >> /etc/environment
                - !Sub echo 'PATH=$PATH:/home/${VSCodeUser}/.local/bin' >> /home/${VSCodeUser}/.bashrc
                - !Sub echo 'export PATH' >> /home/${VSCodeUser}/.bashrc
                - !Sub echo 'export AWS_REGION=${AWS::Region}' >> /home/${VSCodeUser}/.bashrc
                - !Sub echo 'export AWS_ACCOUNTID=${AWS::AccountId}' >> /home/${VSCodeUser}/.bashrc
                - !Sub echo 'export NEXT_TELEMETRY_DISABLED=1' >> /home/${VSCodeUser}/.bashrc
                - !Sub chown -R ${VSCodeUser}:${VSCodeUser} /home/${VSCodeUser}
          - action: aws:runShellScript
            name: InstallAWSCLI
            inputs:
              runCommand:
                - '#!/bin/bash'
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y curl unzip
                - curl -fsSL https://awscli.amazonaws.com/awscli-exe-linux-$(uname -m).zip -o /tmp/aws-cli.zip
                - unzip -q -d /tmp /tmp/aws-cli.zip
                - sudo /tmp/aws/install
                - rm -rf /tmp/aws
                - echo "AWS CLI installed. Checking configuration"
                - aws --version
          - action: aws:runShellScript
            name: InstallDocker
            inputs:
              runCommand:
                - '#!/bin/bash'
                # - curl -fsSL https://get.docker.com | sh
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
                - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                - echo "deb [signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release --codename --short) stable" > /etc/apt/sources.list.d/docker.list
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y docker-ce docker-ce-cli containerd.io
                - sudo groupadd docker
                - !Sub usermod -aG docker ${VSCodeUser}
                - newgrp docker
                - echo "Docker installed. Checking configuration"
                - docker --version
          - action: aws:runShellScript
            name: InstallGit
            inputs:
              runCommand:
                - '#!/bin/bash'
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common
                - add-apt-repository ppa:git-core/ppa
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y git
                - !Sub sudo -u ${VSCodeUser} git config --global user.email "participant@example.com"
                - !Sub sudo -u ${VSCodeUser} git config --global user.name "Workshop Participant"
                - !Sub sudo -u ${VSCodeUser} git config --global init.defaultBranch "main"
                - echo "Git installed. Checking configuration"
                - git --version
          - action: aws:runShellScript
            name: InstallPython
            inputs:
              runCommand:
                - '#!/bin/bash'
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y python3-pip python3.10-venv python3-boto3 python3-pytest
                - !Sub echo 'alias pytest=pytest-3' >> /home/${VSCodeUser}/.bashrc
                - echo "Python and Pip installed. Checking configuration"
                - python3 --version
                - pip3 --version
          - action: aws:runShellScript
            name: InstallCDK
            inputs:
              runCommand:
                - '#!/bin/bash'
                - npm install -g aws-cdk
                - echo "AWS CDK installed. Checking configuration"
                - cdk --version
          - action: aws:runShellScript
            name: InstallGo
            inputs:
              runCommand:
                - '#!/bin/bash'
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common
                - add-apt-repository ppa:longsleep/golang-backports
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y golang-go
                - !Sub chown -R ${VSCodeUser}:${VSCodeUser} /home/${VSCodeUser}
                - echo "Go installed. Checking configuration"
                - go version
          - action: aws:runShellScript
            name: InstallDotnet
            inputs:
              runCommand:
                - '#!/bin/bash'
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y {{ dotNetVersion }}
                - sudo dotnet tool install -g Microsoft.Web.LibraryManager.Cli
                - !Sub echo 'PATH=$PATH:/home/${VSCodeUser}/.dotnet/tools' >> /home/${VSCodeUser}/.bashrc
                - !Sub chown -R ${VSCodeUser}:${VSCodeUser} /home/${VSCodeUser}
                - echo "Dotnet installed. Checking configuration"
                - dotnet --list-sdks
          - action: aws:runShellScript
            name: InstallVite
            inputs:
              runCommand:
                - '#!/bin/bash'
                - npm install -g create-vite
                - echo "Vite installed. Checking configuration"
                - create-vite -h
          - action: aws:runShellScript
            name: InstallJava
            inputs:
              runCommand:
                - '#!/bin/bash'
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y curl gnupg
                - curl -fsSL https://apt.corretto.aws/corretto.key | gpg --dearmor -o /usr/share/keyrings/corretto-keyring.gpg
                - echo "deb [signed-by=/usr/share/keyrings/corretto-keyring.gpg] https://apt.corretto.aws stable main" > /etc/apt/sources.list.d/corretto.list
                - DEBIAN_FRONTEND=noninteractive apt-get update
                - DEBIAN_FRONTEND=noninteractive apt-get install -y java-17-amazon-corretto-jdk maven
                - !Sub echo 'export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))' >> /home/${VSCodeUser}/.bashrc
                - !Sub echo 'export PATH=$PATH:$JAVA_HOME/bin:/usr/share/maven/bin' >> /home/${VSCodeUser}/.bashrc
                - echo "Java and Maven installed. Checking configuration"
                - java -version 2>&1
                - mvn --version
                - update-alternatives --list java
          - action: aws:runShellScript
            name: InstallRust
            inputs:
              runCommand:
                - '#!/bin/bash'
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common
                - add-apt-repository ppa:ubuntu-mozilla-security/rust-next
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y rustc cargo
                - !Sub chown -R ${VSCodeUser}:${VSCodeUser} /home/${VSCodeUser}
                - echo "Rust installed. Checking configuration"
                - rustc --version
          - action: aws:runShellScript
            name: InstallTerraform
            inputs:
              runCommand:
                - '#!/bin/bash'
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y curl gnupg lsb-release
                - curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-keyring.gpg
                - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-keyring.gpg] https://apt.releases.hashicorp.com/ $(lsb_release --codename --short) main" >> /etc/apt/sources.list.d/hashicorp.list
                - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y terraform
                - echo "Terraform installed. Checking configuration"
                - terraform --version
          - action: aws:runShellScript
            name: InstallJQ
            inputs:
              runCommand:
                - '#!/bin/bash'
                - sudo apt-get install jq -y
                - echo "JQ installed"
          - action: aws:runShellScript
            name: BuildGameLiftAgent
            inputs:
              runCommand:
                - '#!/bin/bash'
                - git clone https://github.com/aws/amazon-gamelift-agent.git
                - cd amazon-gamelift-agent/
                - !Sub git checkout git checkout ${GameLiftAgentVersion}
                #- export GAMELIFT_AGENT_VERSION=$(grep -m 1 '^# ' CHANGELOG.md | sed 's/^# \([0-9.]*\).*/{"version":"\1"}/' | jq -r .version)
                - !Sub | 
                  if [ ${GameLiftAgentVersion} = "1.0.1" ]; then
                          echo "GAMELIFT_AGENT_VERSION is 1.0.1. Downloading patch for Amazon ECS metadata access..."

                          # URL of the patch file
                          PATCH_URLs=(
                            "https://patch-diff.githubusercontent.com/raw/aws/amazon-gamelift-agent/pull/14.patch",
                            "https://raw.githubusercontent.com/aws-samples/amazon-gamelift-anywhere-sample/gamelift-ide-cfn/gamelift-ide/gamelift-agent-private-patch/block_spot_healthcheck.patch"
                          )
                          
                          # Download the patch file using curl
                          wget "$PATCH_URL"
                          
                          # Check if the download was successful
                          if [ $? -eq 0 ]; then
                              echo "Patch file downloaded successfully as patch_14.patch"
                          else
                              echo "Error: Failed to download the patch file"
                              exit 1
                          fi
                          git apply 14.patch
                      else
                          echo "GAMELIFT_AGENT_VERSION is not 1.0.1. Selected version: ${GameLiftAgentVersion}"
                          echo "Patch download not required"
                      fi
                - |
                  cd /GameLift/amazon-gamelift-agent
                  echo "Building Amazon GameLift Agent..."
                  mvn clean compile assembly:single
                  if [ $? -eq 0 ]; then
                    echo "Amazon GameLift Agent has been succesfully built."
                    ls ./target/GameLiftAgent-1.0.jar
                  else
                    echo "Error: Failed to build the Amazon GameLift Agent"
                  fi
                - !Sub mv ./target/GameLiftAgent-1.0.jar /${HomeFolder}
                - !Sub chown -R ${VSCodeUser}:${VSCodeUser} ${HomeFolder}
  VSCodeSSMDocLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/ssm/${VSCodeSSMDoc}

  ########### EC2 Resources ###########
  VSCodeInstanceRole:
    # Metadata:
    #   cfn_nag:
    #     rules_to_suppress:
    #       - id: W11
    #         reason: CodeWhisperer requires '*' as a resource, reference https://docs.aws.amazon.com/codewhisperer/latest/userguide/cloud9-setup.html#codewhisperer-IAM-policies
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
                - gamelift.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        # Add managed policy for AmazonSSMServiceRolePolicy
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        #- !Sub arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess # We define fine-grained access to only workshop resources instead of this
      Policies:
        - PolicyName: !Sub CDKAssumeRolePolicy-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - !Sub arn:${AWS::Partition}:iam::*:role/cdk-*
        - PolicyName: !Sub Codewhisperer-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codewhisperer:GenerateRecommendations
                Resource: '*'
        # AWS resource access
        - PolicyName: BlogResourcesAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - cloud9:*
                  - cloudformation:*
                  - cloudwatch:*
                  - dynamodb:*
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeRegions
                  - ec2:DescribeVpcEndpoints
                  - ec2:CreateVpc 
                  - ec2:CreateSubnet 
                  - ec2:DescribeAvailabilityZones
                  - ec2:CreateRouteTable 
                  - ec2:CreateRoute 
                  - ec2:CreateInternetGateway 
                  - ec2:AttachInternetGateway 
                  - ec2:AssociateRouteTable 
                  - ec2:ModifyVpcAttribute
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:UpdateSecurityGroupRuleDescriptionsEgress
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:DeleteSecurityGroup
                  - ec2:ModifySecurityGroupRules
                  - ec2:UpdateSecurityGroupRuleDescriptionsIngress
                  - ec2:CreateSecurityGroup
                  - ec2:DescribeSecurityGroupRules
                  - ec2:DescribeVpcs
                  - ec2:DescribeSecurityGroups
                  - ec2:CreateTags
                  - ec2:DescribeTags
                  - ecr:*
                  - ecs:*
                  - s3:*
                  - xray:*
                  - elasticloadbalancing:*
                  - iam:SimulatePrincipalPolicy
                  - iam:AttachRolePolicy
                  - iam:CreateRole
                  - iam:GetRole
                  - iam:PassRole
                  - iam:GetRolePolicy
                  - iam:ListAttachedRolePolicies
                  - iam:ListRolePolicies
                  - iam:PutRolePolicy
                  - iam:TagRole
                  - lambda:*
                  - logs:*
                  - sts:GetCallerIdentity
                  - tag:GetResources
                  - tag:GetTagKeys
                  - kms:Decrypt
                  - kms:GenerateDataKey
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                  - wafv2:*
                  - cloudfront:*
                  - events:*
                  - schemas:*
                  - scheduler:*
                  - pipes:*
                  - secretsmanager:*
                  - apigateway:*
                  - compute-optimizer:*
                  - gamelift:*

  VSCodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref VSCodeInstanceRole

  VSCodeInstance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - Ebs:
            VolumeSize: !Ref InstanceVolumeSize
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
          DeviceName: /dev/sda1
      Monitoring: true
      ImageId: !Ref InstanceAmiId
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref VSCodeInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          hostname: ${InstanceName}
          runcmd:
            - !Sub mkdir -p ${HomeFolder} && chown ${VSCodeUser}:${VSCodeUser} ${HomeFolder}
      Tags:
      - Key: Name
        Value: !Ref InstanceName

  ########### CloudFront Resources ###########
  VSCodeInstanceCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 1
        Name: !Join ['-', ['VSCodeServer', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: all
          EnableAcceptEncodingGzip: False
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Accept-Charset
              - Authorization
              - Origin
              - Accept
              - Referer
              - Host
              - Accept-Language
              - Accept-Encoding
              - Accept-Datetime
          QueryStringsConfig:
            QueryStringBehavior: all

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: True
        HttpVersion: http2
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html#managed-cache-policy-caching-disabled
            Compress: False
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # Managed-AllViewer - see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html#:~:text=When%20using%20AWS,47e4%2Db989%2D5492eafa07d3
            TargetOriginId: !Sub CloudFront-${AWS::StackName}
            ViewerProtocolPolicy: allow-all
            PathPattern: '/proxy/*'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          CachePolicyId: !Ref VSCodeInstanceCachePolicy
          OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # Managed-AllViewer - see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html#:~:text=When%20using%20AWS,47e4%2Db989%2D5492eafa07d3
          TargetOriginId: !Sub CloudFront-${AWS::StackName}
          ViewerProtocolPolicy: allow-all
        Origins:
          - DomainName: !GetAtt VSCodeInstance.PublicDnsName
            Id: !Sub CloudFront-${AWS::StackName}
            CustomOriginConfig:
              OriginProtocolPolicy: http-only

  ########### SecurityGroup Resources ###########
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for VSCodeServer - only allow CloudFront ingress
      SecurityGroupIngress:
        - Description: Allow HTTP from com.amazonaws.global.cloudfront.origin-facing
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourcePrefixListId: !FindInMap [AWSRegions2PrefixListID, !Ref 'AWS::Region', PrefixList]

Outputs:
  VSCodeServerURL:
    Description: VSCode-Server URL
    Value: !Sub https://${CloudFrontDistribution.DomainName}/?folder=${HomeFolder}
  Password:
    Description: VSCode-Server Password
    Value: !GetAtt SecretPlaintext.password